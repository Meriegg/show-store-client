// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Type {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]

  @@map("type")
}

model Product {
  id                             String            @id @default(cuid())
  name                           String
  price                          Float
  types                          Type[]
  images                         String[]
  // Verify that the name and the price are valid and were not modified
  publicPriceNameVerificationKey String
  verificationKey                String
  // Used to display the popularity of an item
  orders                         ProductForOrder[] @relation("Orders")
  createdOn                      DateTime          @default(now())

  @@map("product")
}

model ProductForOrder {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], name: "Orders")
  quantity  Int
  size      String
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], name: "OrderContent", onDelete: Cascade)

  @@map("productForOrder")
}

enum OrderPaymentMode {
  pay_online
  pay_on_delivery
}

enum OrderStatus {
  in_preparation
  in_shipping
  delivered
}

enum OrderPaymentStatus {
  paid
  unpaid
}

model Order {
  id                 String           @id @default(cuid())
  firstName          String
  lastName           String
  address            String
  addressExtras      String?
  email              String
  country            String
  extraDeliveryNotes String?
  paymentMode        OrderPaymentMode
  orderStatus        OrderStatus      @default(in_preparation)

  // The shipping price may change so its good to have the shipping price
  // at the time of order stored
  timeOfOrderShippingPrice Float

  // Will be automatically set as paid if the customer pays online
  // using stripe
  orderPaymentStatus OrderPaymentStatus @default(unpaid)
  createdOn          DateTime           @default(now())
  deliveredOn        DateTime?
  orderTotal         Float
  content            ProductForOrder[]  @relation("OrderContent")

  @@map("order")
}

// Admin
enum AdminRole {
  local_admin
  owner
}

enum PasswordType {
  hashed
  public
}

model AdminSession {
  id                    String    @id @default(cuid())
  expires               DateTime
  sessionToken          String    @unique
  hashedUserIP          String?
  publicVerificationKey String    @unique
  adminId               String
  adminUser             AdminUser @relation(fields: [adminId], references: [id], name: "ActiveSessions")

  @@map("adminSession")
}

model AdminUser {
  id             String         @id @default(cuid())
  name           String         @unique
  password       String
  passwordType   PasswordType   @default(hashed)
  role           AdminRole      @default(local_admin)
  activeSessions AdminSession[] @relation("ActiveSessions")

  @@map("adminUser")
}

model StoreConfig {
  id                      String   @id @default(cuid())
  name                    String?
  shippingPrice           Float
  homeHorizontalListItems String[]
  isActive                Boolean  @default(false)

  @@map("storeConfig")
}
